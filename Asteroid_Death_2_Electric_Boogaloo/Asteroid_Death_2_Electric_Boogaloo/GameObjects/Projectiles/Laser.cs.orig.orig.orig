using System;
using Microsoft.Xna.Framework;

<<<<<<< HEAD
namespace Asteroid_Death_2_Electric_Boogaloo.GameObjects.Projectiles
{
    public class Laser : Projectile
<<<<<<< HEAD
<<<<<<< HEAD
    {      
        #region Public constructors
        public Laser(AsteroidsGame game, Vector2 position, float rotation, Weapon.Color color, Type parentType) : base(game, position, rotation, color, parentType, 1)
=======
    {
        
        public Laser(AsteroidsGame game, Vector2 position, float rotation, Weapon.Color color, Type parent) 
            : base(game, position, rotation, color, parent, 1)
>>>>>>> feature-enemy
=======
    {
        #region Public constructors
=======
    {      
>>>>>>> origin/Feature_MovementOfPlayer
        public Laser(AsteroidsGame game, Vector2 position, float rotation, Weapon.Color color, Type parentType) : base(game, position, rotation, color, parentType, 1)
>>>>>>> dcaa29908a807acb08043d63be01d1e9689979a2
        {
            Texture = TextureManager.Instance.LaserTextures[(int)color];
        }
        #endregion

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> dcaa29908a807acb08043d63be01d1e9689979a2
=======
namespace Asteroid_Death_2_Electric_Boogaloo.GameObjects
{
    public class Laser : Projectile
    {      
        #region Public constructors
        public Laser(AsteroidsGame game, Vector2 position, float rotation, Weapon.Color color, Type parentType) : base(game, position, rotation, color, parentType, 1)
        {
            Texture = TextureManager.Instance.LaserTextures[(int)color];
        }
<<<<<<< HEAD
=======
        #endregion

>>>>>>> origin/Feature-Powerups
        #region Protected overrides
        protected override Type GetClassType()
        {
            return typeof(Laser);
        } 
        #endregion

        #region Public overrides
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> feature-enemy
=======
>>>>>>> dcaa29908a807acb08043d63be01d1e9689979a2
=======
>>>>>>> origin/develop
>>>>>>> origin/Feature-Powerups
        public override void Update()
        {
            DieIfOutSideMap();

            Speed = Forward() * 11;
            AccelerateForward(9);
            Move();

            base.Update();
<<<<<<< HEAD
        } 
        #endregion
=======
<<<<<<< HEAD
        }

        protected override Type GetClassType()
        {
            return typeof(Laser);
        }
=======
        } 
        #endregion
>>>>>>> origin/develop
>>>>>>> origin/Feature-Powerups
    }
}